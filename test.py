import unittest
import lemmatization as lemma


class WordcountTest(unittest.TestCase):

    def test_danish_lemmatizatizer(self):
        f = open("testcases/testcase_da.txt", encoding='utf-8')
        string = f.read()
        f.close()
        answer = ['Danmark', 'sikre', 'billet', 'vm', 'sejr', 'østrig', 'tirsdag', 'aften', 'dansker', 'vm', 'livline', 'dansk', 'herrelandshold', 'fodbold', 'snublende', 'plads', 'år', 'vm', 'slutru', 'inden', 'tirsdag', 'kamp', 'mod', 'østrig', 'park', 'Danmark', '21', 'point', 'skotland', '14', 'point', 'indhente', 'Danmark', 'løb', 'sidste', 'tre', 'spillerunde', 'vm', 'kvalifikation', 'østrig', 'ødelægge', 'dansk', 'vm', 'fest', 'Danmark', 'sikre', 'andenplads', 'gruppe', 'andenpladse', 'give', 'adgang', 'vm', 'playoffkampe', '12', 'hold', 'kæmpe', 'tre', 'vm', 'billet', 'klart', 'sandsynlig', 'danmark', 'vinde', 'gruppe', 'snuppe', 'direkte', 'billet', 'omdiskutere', 'slutru', 'qatar', 'læse', 'mulighed', 'vm', 'billetten', 'hus', 'vinde', 'Danmark', 'tre', 'kamp', 'kvalificere', 'vm', 'danmark', 'tillade', 'tabe', 'østrig', 'færø', 'snuppe', 'vm', 'billett', 'enkelt', 'point', 'ude', 'mod', 'skotland', 'sidste', 'kamp', 'spille', 'Danmark', 'uafgjort', 'mod', 'både', 'østrig', 'færøerne', 'tabe', 'skotland', 'skotter', 'samtidig', 'hente', 'danmark', 'aktuel', 'forspring', 'målforskell', '21', 'mål', 'fravriste', 'Danmark', 'førstepladse', 'Danmark', 'komme', 'vm', 'trods', 'tre', 'nederlag', 'skotland', 'samtidig', 'tabe', 'ude', 'færø', 'moldova', 'inden', 'møde', 'Danmark', 'tilfælde', 'to', 'uafgjore', 'skotsk', 'kamp', 'mod', 'færø', 'moldova', 'kvalificere', 'Danmark', 'vm', 'måtte', 'nederlag', 'mod', 'østrig', 'færø', 'statistik', 'analysevirksomhed', 'gracenote', 'regne', 'frem', 'danmark', '99,8', 'procent', 'sikkerhed', 'kvalificere', 'direkte', 'vm', 'Danmark', 'mangle', 'møde', 'østrig', 'hjemme', 'færø', 'hjemme', 'skotland', 'ude']
        testcase = lemma.lemmatization(string,"da")
        self.assertEqual(testcase, answer)

    def test_english_lemmatizer(self):
        f = open("testcases/testcase_en.txt", encoding='utf-8')
        string = f.read()
        f.close()
        answer = ['microsoft', 'cofounder', 'long', 'streak', 'country', 'second', 'rich', 'end', 'stock', 'transfer', 'tie', 'divorce', 'bill', 'gate', 'long', 'streak', 'rich', 'people', 'america', 'come', 'end', 'time', '1991', 'microsoft', 'cofounder', 'isn', '1', '2', 'forbes', '400', 'annually', 'rank', 'rich', 'people', 'gate', 'fortune', 'jump', '23', 'billion', 'year', 'ago', 'estimate', '134', 'billion', 'wasn', 'catch', 'amazon', 'founder', 'jeff', 'bezos', 'tesla', 'ceo', 'elon', 'musk', 'facebook', 'ceo', 'mark', 'zuckerberg', 'fortune', 'reach', 'new', 'height', 'thank', 'respective', 'company', 'rise', 'share', 'price', 'gate', 'come', 'landing', '4', 'spot', 'stock', 'market', 'isn', 'reason', 'gate', '2', 'year', 'chunk', 'gate', 'net', 'worth', '5', '7', 'billion', 'worth', 'share', 'publicly', 'trade', 'company', 'go', 'ex', 'wife', 'melinda', 'french', 'gate', 'announce', 'divorce', 'marriage', 'fortune', 'stay', 'intact', 'gate', 'rich', 'zuckerberg', '3', 'year', 'nearly', 'quarter', 'gate', 'fortune', 'come', 'estimate', '1', '3', 'stake', 'microsoft', 'worth', '31', 'billion', 'september', '3', 'date', 'forbe', 'take', 'snapshot', 'wealth', 'year', 'forbe', '400', 'list', 'rest', 'gate', 'fortune', 'come', 'investment', 'firm', 'cascade', 'investment', 'llc', 'asset', 'sprawl', '143', 'million', 'estate', 'medina', 'washington', 'dub', 'xanadu', 'cascade', 'gate', 'own', 'control', 'stake', 'season', 'hotel', '14', 'car', 'dealership', 'autonation', 'share', 'waste', 'management', 'firm', 'republic', 'service', 'tractor', 'maker', 'deere', 'co', 'canadian', 'national', 'railway', 'makeup', 'gates', 'fortune', 'look', 'lot', 'different', 'appear', 'forbes', '400', '1986', 'year', 'microsoft', 'go', 'public', 'gate', 'own', '45', 'microsoft', 'share', 'time', 'worth', '315', 'million', 'year', 'microsoft', 'surge', 'stock', 'price', 'world', 'young', 'billionaire', 'worth', '1', '25', 'billion', 'age', '31', 'microsoft', 'exceed', '1', 'billion', 'revenue', 'time', '1990', 'large', 'supplier', 'computer', 'software', 'time', '1991', 'gate', 'leapfrog', '2', 'forbes', '400', '16', 'prior', 'year', 'net', 'worth', '4', '8', 'billion', 'follow', 'year', '1992', 'rich', 'person', 'america', 'worth', '6', '3', 'billion', 'gate', 'step', 'ceo', '2000', 'net', 'worth', 'drop', 'time', 'remain', '1', 'forbes', '400', 'microsoft', 'stock', 'price', 'stumble', 'amid', 'dot', 'com', 'crash', 'defend', 'antitrust', 'charge', 'bring', 'government', 'gate', 'transfer', '20', 'billion', 'worth', 'microsoft', 'stock', 'bill', 'melinda', 'gates', 'foundation', 'form', '2000', 'shrink', 'net', 'worth', 'bill', 'gate', 'fortune', 'forbes', '400', 'debut', 'look', 'bill', 'gates', 'rank', 'forbes', '400', 'net', 'worth', 'land', 'list', '1986', 'continue', 'make', 'significant', 'donation', 'foundation', 'large', 'private', 'philanthropic', 'organization', 'world', 'gate', 'remain', 'wealthy', 'person', 'america', '2017', 'longtime', 'pal', 'warren', 'buffett', 'rich', 'brief', 'period', 'spring', '2008', 'time', 'forbes', '400', 'list', 'release', 'later', 'year', 'gate', 'reclaim', 'spot', '1994', '2020', 'bill', 'melinda', 'gate', 'donate', '36', '8', 'billion', 'gate', 'foundation', 'gift', 'microsoft', 'stock', 'gate', 'drop', '2', '2018', 'bezos', 'overtake', 'time', 'late', '2020', 'musk', 'fly', 'past', 'gate', 'thank', 'tesla', 'staggering', 'stock', 'market', 'rally', 'august', 'gate', 'slip', 'zuckerberg', 'time', 'largely', 'stock', 'transfer', 'melinda', 'billionaire', 'ranking', 'fickle', 'finalize', '2021', 'forbes', '400', 'list', 'unusually', 'long', 'facebook', 'outage', 'monday', 'scrutiny', 'relate', 'teen', 'mental', 'health', 'push', 'facebook', 'stock', 'price', 'put', 'gate', 'rich', 'person', 'america']
        testcase = lemma.lemmatization(string,"en")
        self.assertEqual(testcase, answer)


if __name__ == '__main__':
    unittest.main()
